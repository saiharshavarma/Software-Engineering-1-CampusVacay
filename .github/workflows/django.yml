name: Django CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt  # Modify path if requirements.txt is in a subfolder

      - name: Run Tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Install PostgreSQL client to use `psql`
          sudo apt-get update && sudo apt-get install -y postgresql-client

          # Terminate any active connections to the test database before tests
          PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -p $DB_PORT -d postgres -c "
          SELECT pg_terminate_backend(pg_stat_activity.pid)
          FROM pg_stat_activity
          WHERE pg_stat_activity.datname = 'test_postgres'
          AND pid <> pg_backend_pid();"

          # Run Django tests
          cd backend
          python manage.py test --noinput

          # Teardown: Force terminate any lingering connections and delete the test database
          PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -p $DB_PORT -d postgres -c "
          SELECT pg_terminate_backend(pg_stat_activity.pid)
          FROM pg_stat_activity
          WHERE pg_stat_activity.datname = 'test_postgres'
          AND pid <> pg_backend_pid();"

          # Drop the test database manually
          PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -p $DB_PORT -d postgres -c "DROP DATABASE IF EXISTS test_postgres;"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12" # Use the version compatible with your EC2 deployment
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        shell: bash

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Deploy to EC2
        env:
          #DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          #ENV_VARIABLES: ${{ secrets.ENV_VARIABLES }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          # Connect to EC2 and deploy
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Connecting to EC2 and deploying application..."

            # Navigate to your project directory on the EC2 instance
            cd Software-Engineering-1-CampusVacay/backend  # Replace with the actual path

            # Pull latest code
            git fetch --all
            git reset --hard origin/main

            # Activate virtual environment
            source env/bin/activate

            # Install any new dependencies
            pip install -r requirements.txt

            # Apply migrations
            python manage.py migrate

            # Collect static files
            python manage.py collectstatic --noinput

            # Restart Gunicorn and Nginx
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
          EOF
